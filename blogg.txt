There are some basic principles that have proven, over decades of Object-Oriented software development, to make software generally more flexible and amenable to change. Principles such as:

Small objects with a single, well-defined responsibility.
Small methods that do only one thing.
Limiting the number of types an object collaborates with.
Strictly limiting the use of global state and singletons (that includes limiting the use of class-level methods).
Small object interfaces with simple method signatures.
Preferring composition over inheritance.


public_method(:method_name)/instance_method(:method_name) gives the method object then we can call it anytime without creating an object
*args vs args

*args represent the actual arguments those may be hash or array or else but args is an array which contains the passed type object
we can pass *args to another method but we can't use *args to retrieve or itterate 

If we send collection at partial then no need to itterate overthere


To satisfy our need for an object which mates a model and a view, we’ll use
what I’ve taken to calling an Exhibit object. If the Model is concerned with
storing and manipulating business data, and the View is concerned with
displaying it, you can think of the Exhibit as standing between them decid-
ing which data to show, and in what order. It may also provide some extra
presentation-specific information (such as the specific URLs for related re-
sources) which the business model has no knowledge of by itself.


